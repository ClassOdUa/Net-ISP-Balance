{"name":"Net-isp-balance","tagline":"Set of scripts to load-balance your Internet connection across two or more ISPs with auto failover","body":"This package allows you to load-balance a home or\r\nsmall business Internet connection across two or more ISPs. You may use it with a single host attached to two ISPs, or on a router/firewall machine to load balance your entire LAN. This gives you\r\nadditional bandwidth and reliability. Network traffic is balanced across both ISP connections to increase upload and download capacity, and if one ISP fails, the other ISP(s)\r\nwill take over automatically.\r\n\r\nThese package runs on Linux systems, and will not work on Windows or Mac OSX systems.\r\n\r\nLIMITATIONS: To date (21 February 2014) these scripts have only been\r\ntested on Ubuntu/Debian systems that configure their network\r\ninterfaces via a /etc/network/interfaces file, and RedHat/CentOS\r\nsystems that configure their interfaces via\r\n/etc/sysconfig/network-scripts. Please feel free to contribute support\r\nfor other distributions.\r\n\r\nInstallation\r\n============\r\n\r\n<ol>\r\n<li> Download the zip file of the source code from\r\nhttps://github.com/lstein/Net-ISP-Balance, or use git to clone the\r\nrepository. \r\n\r\n<li> Place the unpacked subdirectory in a home directory on the\r\nrouter/firewall machine.\r\n\r\n<li> Check/install the following prerequisites on the router:\r\n<ul>\r\n <li> C compiler and \"make\" tool. (\"apt-get install build-essential\" on\r\n Debian/Ubuntu systems will do this for you.)\r\n\r\n <li> Perl version 5.8 or higher.\r\n</ul>\r\n\r\n<li> Enter the unpacked directory and run:\r\n\r\n<pre>\r\n  perl ./Build.PL\r\n  ./Build installdeps\r\n  ./Build test\r\n  sudo ./Build install\r\n</pre>\r\n\r\n<li> Edit the example configuration file <i>balance.conf</i> to\r\nbalance.conf. If you are on a Ubuntu/Debian system, this file will be\r\nlocated at /etc/network/balance.conf. If you are on a RedHat/CentOS\r\nsystem, you'll find it in /etc/sysconfig/network-scripts/balance.conf.\r\n\r\nYou'll need to edit this file to match your network topology. Here is a typical home router setup:\r\n\r\n<pre>\r\n                                   Cable modem ------> ISP1 --------+\r\n                                       ^                             \\\r\n  home machine 1 ------>|              | eth0                         \\\r\n                        |  eth1        |                               \\\r\n  home machine 2 ------>|-------> router/firewall                      INTERNET--->www.google.ca\r\n                        |              |                               /          (173.194.43.95)\r\n  home machine 3 ------>|              | ppp0                         /\r\n                                       v                             /\r\n                                   DSL modem   ------> ISP2 --------+\r\n</pre>\r\n\r\nThe router/firewall is connected to the home network via network interface eth1. It is connected to the internet via two ISPs, one using a cable modem attached to interface eth0, and the other using a DSL modem via interface ppp0.\r\n\r\nThe example balance.conf file contains a commented table that corresponds to this network topology:\r\n\r\n<pre>\r\n ##service    device   role     ping-ip\r\n #CABLE\t      eth0     isp      173.194.43.95     <b><= remove the # sign</b>\r\n #DSL\t      ppp0     isp      173.194.43.95     <b><= remove the # sign</b>\r\n #LAN\t      eth1     lan                        <b><= remove the  # sign</b>\r\n</pre>\r\n\r\nRemove the # signs from the body of the table and edit to match your network. \r\n\r\nThe first column is a service name that is used to\r\nbring up or down the needed routes and firewall rules.\r\n\r\nThe second column is the name of the network interface device that\r\nconnects to that service.\r\n\r\nThe third column is either \"isp\" or \"lan\". There may be any number of\r\nthese. The script will firewall traffic passing through any of the\r\nISPs, and will load balance traffic among them. Traffic can flow\r\nfreely among any of the interfaces marked as belonging to a LAN.\r\n\r\nThe fourth and last column is the IP address of a host that can be\r\nperiodically pinged to test the integrity of each ISP connection. If\r\ntoo many pings failed, the service will be brought down and all\r\ntraffic routed through the remaining ISP(s). The service will continue\r\nto be monitored and will be brought up when it is once again\r\nworking. Choose a host that is not likely to go offline for reasons\r\nunrelated to your network connectivity, such as google.com, or the\r\nISP's web site.\r\n\r\nIf this package is running on a single Internet-connected host, not a router, then do not include a \"lan\" line.\r\n\r\nThere are additional configuration options related to how often the link status is monitored. You may wish to uncomment and adjust these as well:\r\n\r\n<pre>\r\n#warn_email=root@localhost\r\n#interval_ms=1000\r\n#max_packet_loss=15\r\n#max_successive_pkts_lost=7\r\n#min_packet_loss=5\r\n#min_successive_pkts_rcvd=10\r\n</pre>\r\n\r\n<b>warn_email</b> provides an email address to send notification messages to if the status of a link changes (goes down, or comes back up). You must have the \"mail\" program installed and configured for this to work. <b>interval_ms</b> indicates how often to check the ping host for each ISP. <b>min_packet_loss</b> and <b>max_packet_loss</b> define the minimum and maximum packet losses required to declare a link up or down. <b>min_successive_pkts_rcvd</b> and <b>max_successive_pkts_recvd</b> define the minimum and maximum numbers of successively-transmitted pings that must be returned in order to declare a link up or down.\r\n\r\n<li> (optional) Make edits to the firewall and route rules.\r\n\r\nThis mechanism allows you to add additional entries to the routing\r\ntables and/or firewall. See Further Configuration for more details.\r\n\r\n<li> (optional) Run load_balance.pl in debug mode to see the commands it\r\nwill execute.\r\n\r\nIf you wish to check how the balancing script will configure your\r\nsystem when you execute it, then run (as a regular user) the following\r\ncommand:\r\n\r\n<pre>\r\n /etc/network/load_balance.pl -d > commands.sh    # Ubuntu/Debian\r\n\r\n-or-\r\n\r\n /etc/sysconfig/network-scripts/load_balance.pl -d > commands.sh  # RedHat/CentOS\r\n</pre>\r\n\r\nThe \"-d\" argument puts the script into debug mode. All commands that\r\nit would run on your behalf are placed into 'commands.sh' for your\r\ninspection. You may also execute commands.sh to start balanced routing\r\nand firewalling:\r\n\r\n<pre>\r\n /bin/sh commands.sh\r\n</pre>\r\n\r\n<li> Start the script running. Become the superuser and run\r\nload_balance.pl:\r\n\r\n<pre>\r\n sudo /etc/network/load_balance.pl                      # Ubuntu/Debian\r\n su -c /etc/sysconfig/network-scripts/load_balance.pl   # RedHat/CentOS\r\n</pre>\r\n\r\nThis will configure the system for load balancing, installing a\r\nrestrictive set of firewall rules, and launch the lsm daemon to\r\nmonitor each of the ISPs for activity.\r\n\r\n<li> Arrange for load_balance.pl to be run on system startup time.\r\n\r\nYou may do this by adding an entry in rc.local:\r\n\r\n</pre>\r\n if [ -x /etc/network/load_balance.pl ]; then\r\n     /etc/network/load_balance.pl\r\n fi\r\n</pre>\r\n\r\nModify as needed for RedHat/CentOS.\r\n\r\nHowever, my preference is to invoke the script when the LAN interface\r\ncomes up. On Ubuntu/Debian systems, edit\r\n<i>/etc/network/interfaces</i> (Ubuntu/Debian), find the reference to\r\nthe LAN interface, and edit it to add a \"post-up\" option as shown\r\nhere:\r\n\r\n<pre>\r\n auto eth2\r\n iface eth2 inet static\r\n ... blah blah ...\r\n post-up /etc/network/load_balance.pl\r\n</pre>\r\n\r\nOn RedHat/CentOS systems, create an executable script named\r\n/sbin/ifup-local, and populate it with the following code:\r\n\r\n<pre>\r\n#!/bin/sh\r\n\r\nLANDEV=eth2;\r\n\r\nif [ \"$1\" eq \"$LANDEV\" ] ; then\r\n   /etc/sysconfig/network-scripts/load_balance.pl\r\nfi\r\n</pre>\r\n\r\nBe sure to change \"eth2\" to the correct device for the LAN interface.\r\n\r\nFurther Configuration\r\n=====================\r\n\r\nThe default is to establish a reasonably restrictive firewall which\r\nallows incoming ssh services to the router from the Internet and\r\nrejects all other incoming services. You may modify this if you wish\r\nby adding additional firewall rules and routes.\r\n\r\nThe routes and rules are located in these subdirectories on\r\nUbuntu/Debian systems:\r\n\r\n<pre>\r\n /etc/network/balance/firewall       # firewall rules\r\n /etc/network/balance/routes         # routes\r\n</pre>\r\n\r\nand here on RedHat/CentOS systems:\r\n\r\n<pre>\r\n /etc/sysconfig/network-scripts/balance/firewall       # firewall rules\r\n /etc/sysconfig/network-scripts/balance/routes         # routes\r\n</pre>\r\n\r\n\r\nAny files you put into these directories will be read in alphabetic\r\norder and added to the routes and/or firewall rules emitted by the\r\nload balancing script.\r\n\r\nA typical routing rules file will look like the example shown\r\nbelow.\r\n\r\n<pre>\r\n ip route add 192.168.100.1  dev eth0 src 198.162.1.14\r\n ip route add 192.168.1.0/24 dev eth2 src 10.0.0.4\r\n</pre>\r\n\r\nEach line will be sent to the shell, and it is intended (but not\r\nrequired) that these be calls to the \"ip\" command. General shell\r\nscripting constructs are not allowed here.\r\n\r\nA typical firewall rules file will look like the example shown here:\r\n\r\n<pre>\r\n # accept incoming telnet connections to the router\r\n iptable -A INPUT -p tcp --syn --dport telnet -j ACCEPT\r\n\r\n # masquerade connections to the DSL modem's control interface\r\n iptables -t nat -A POSTROUTING -o eth2 -j MASQUERADE\r\n</pre>\r\n\r\nYou may also insert routing and firewall rules via fragments of Perl\r\ncode, which is convenient because you don't have to hard-code any\r\nnetwork addresses and can make use of a variety of shortcuts. To do\r\nthis, simply end the file's name with .pl and make it executable.\r\n\r\nHere's an example of a file named\r\n<tt>balance/firewall/01.forwardings.pl</tt> that defines a series of\r\nport forwarding rules for incoming connections:\r\n\r\n<pre>\r\n $B->forward(80 => '192.168.10.35'); # forward port 80 to internal web server\r\n $B->forward(443=> '192.168.10.35'); # forward port 443 to \r\n $B->forward(23 => '192.168.10.35:22'); # forward port 23 to ssh on  web sever\r\n</pre>\r\n\r\nThe main thing to know is that on entry to the script the global\r\nvariable $B will contain an initialized instance of a\r\nNet::ISP::Balance object. You may then make method calls on this\r\nobject to emit firewall and routing rules. Please read the manual page\r\nfor Net::ISP::Balance for further information (\"man\r\nNet::ISP::Balance\").\r\n\r\nCalling the Script by Hand\r\n==========================\r\n\r\nYou can invoke load_balance.pl from the command line to manually bring\r\nup and down ISP services. The format is simple:\r\n\r\n<pre>\r\n/etc/network/load_balance.pl ISP1 ISP2 ISP3 ...                     # Ubuntu/Debian\r\n/etc/sysconfig/network-scripts/load_balance.pl ISP1 ISP2 ISP3 ...   # RedHat/CentOS\r\n</pre>\r\n\r\nISP1, etc are service names defined in the configuration file. All\r\nISPs indicated on the command line will be maked as \"up\", others will\r\nnot be used for load balancing. If no services are indicated on the\r\ncommand line, then ALL the ISP services will be marked up initially\r\nand lsm will be launched to monitor their connectivity periodically.\r\n\r\nAdding a -d option will print the routing and firewall commands to\r\nstandard output for inspection.\r\n\r\nHow it Works\r\n============\r\n\r\nThe script uses two tricks to balance. The first is to set up a\r\nmultipath default routing destination as described at\r\nhttp://lartc.org/howto/lartc.rpdb.multiple-links.html\r\n\r\n<pre>\r\n ip route add default \\\r\n\tnexthop via 206.250.80.122  dev ppp0 weight 1 \\\r\n\tnexthop via 198.5.13.201    dev eth0 weight 1\r\n</pre>\r\n\r\nThis balances network sessions originating from the router, but does\r\nnot work for forwarded (NAT-ed) sessions from the LAN. To accomplish\r\nthe latter, the script uses a combination of ip routing tables for\r\noutgoing connections, the firewall mark (fwmark) mechanism to select\r\ntables, and the iptables \"mangle\" chain to randomly select which\r\nISP to use for outgoing connections:\r\n\r\n<pre>\r\n iptables -t mangle -A PREROUTING -i eth2 -m conntrack --ctstate NEW \\\r\n          -m statistic --mode random --probability 1 -j MARK-ISP1\r\n iptables -t mangle -A PREROUTING -i eth2 -m conntrack --ctstate NEW \\\r\n          -m statistic --mode random --probability 0.5 -j MARK-ISP2\r\n</pre>\r\n\r\nThis strategy is described at\r\nhttps://home.regit.org/netfilter-en/links-load-balancing/.\r\n\r\nLicense\r\n=======\r\n\r\nPerl Artistic License version 2.0\r\n(http://www.perlfoundation.org/artistic_license_2_0).\r\n\r\nCredits\r\n=======\r\n\r\nThis package contains a slightly-modified version of Mika Ilmaranta's\r\n&lt;ilmis at nullnet.fi&gt; Link Status Monitor (lsm) package. The original\r\nsource code can be fond at http://lsm.foobar.fi/.\r\n\r\n\r\nAuthor\r\n======\r\n\r\nLincoln D. Stein (lincoln.stein@gmail.com).\r\n\r\nSenior Principal Investigator, Ontario Institute for Cancer Research\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}